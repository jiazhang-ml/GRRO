% This is an example file on how the GRRO_LS program [1] could be used.

% [1] J. Zhang, Y. Lin, M. Jiang, S. Li, Y. Tang, K. C. Tan:
% Multi-label feature selection via global relevance and redundancy optimization. In IJCAI, Yokohama, Japan, 2020.

% Please feel free to contact me (zhangjia_gl@163.com), if you have any problem about this program.

clear;clc; addpath(genpath('.\'))

load Bibtex_data 
load('Bibtex_GRRO.mat') % Generated by the program: demo_GRRO.m

k=5; % number of label-specific features
[~,num_feature] = size(train_data); [num_label,~] = size(train_target);
W_GRRO_LS = zeros(num_feature,num_label);
for i = 1:num_label
   s = sort(W(:,i),'descend'); f=[]; f_index=[]; 
   ss = s(1:k);
   for j=1:k
      tm = find(W(:,i)==ss(j));
      for d=1:length(tm)           
          f(j,d) = tm(d);
      end
   end    
   dd = length(find(f==0));
   if dd>0
      ff = unique(f); fff = size(ff,1); f_index = ff(2:fff);
   else 
      f_index = unique(f);
   end  
   for t=1:num_feature
      L = length(find(f_index==t));
      if L ==0
          W_GRRO_LS(t,i) = 0;
      else
          W_GRRO_LS(t,i) = W(t,i);
      end
   end
end

[dumb feature_idx] = sort(sum(W_GRRO_LS,2),'descend');

load('Bibtex_data.mat')
% The default setting of MLKNN
Num = 10;Smooth = 1;

% Train and test
% If you use MLKNN as the classifier, please cite the literature [2]
% [2] M.-L. Zhang, Z.-H. Zhou:
% ML-KNN: A lazy learning approach to multi-label learning. Pattern Recognition 40(7): 2038-2048 (2007)
for i = 1:50
    fprintf('Running the program with the selected features - %d/%d \n',i,num_feature);
    
    f=feature_idx(1:i);
    [Prior,PriorN,Cond,CondN]=MLKNN_train(train_data(:,f),train_target,Num,Smooth);
    [HammingLoss,RankingLoss,Coverage,Average_Precision,macrof1,microf1,Outputs,Pre_Labels]=...
        MLKNN_test(train_data(:,f),train_target,test_data(:,f),test_target,Num,Prior,PriorN,Cond,CondN);
    
    HL_GRRO_LS(i)=HammingLoss;
    RL_GRRO_LS(i)=RankingLoss;
    CV_GRRO_LS(i)=Coverage;
    AP_GRRO_LS(i)=Average_Precision;
    MA_GRRO_LS(i)=macrof1;
    MI_GRRO_LS(i)=microf1;
end

save('Bibtex_GRRO_LS.mat','HL_GRRO_LS','RL_GRRO_LS','CV_GRRO_LS'...
    ,'AP_GRRO_LS','MA_GRRO_LS','MI_GRRO_LS','feature_idx');
